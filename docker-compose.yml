# =============================================================================
# ENTERPRISE DATA PIPELINE - DOCKER COMPOSE CONFIGURATION
# =============================================================================
# Descrição: Orquestração de containers para pipeline de dados com foco em
# segurança, monitoramento e alta disponibilidade para ambiente de demonstração
# 
# Arquitetura: PostgreSQL + MinIO + Redis + Airflow
# Compatibilidade: Docker Compose 3.8+
# =============================================================================

version: '3.8'

# =============================================================================
# DEFINIÇÃO DE SERVIÇOS
# =============================================================================
services:
  
  # ---------------------------------------------------------------------------
  # DATA WAREHOUSE - PostgreSQL Enterprise
  # ---------------------------------------------------------------------------
  postgres:
    image: postgres:13-alpine
    container_name: postgres_data_warehouse
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-airflow_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-secure_password_2024}
      POSTGRES_DB: ${POSTGRES_DB:-airflow_warehouse}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --locale=C"
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    networks:
      - data_pipeline_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-airflow_user} -d ${POSTGRES_DB:-airflow_warehouse}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
  
  # ---------------------------------------------------------------------------
  # OBJECT STORAGE - MinIO S3 Compatible
  # ---------------------------------------------------------------------------
  minio:
    image: minio/minio:latest
    container_name: minio_object_storage
    restart: unless-stopped
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-admin}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-minio_secure_2024}
      MINIO_BROWSER_REDIRECT_URL: "http://localhost:${MINIO_CONSOLE_PORT:-9001}"
    ports:
      - "${MINIO_API_PORT:-9000}:9000"
      - "${MINIO_CONSOLE_PORT:-9001}:9001"
    volumes:
      - minio_data:/data
      - ./minio-config:/root/.minio
    networks:
      - data_pipeline_network
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 15s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
  
  # ---------------------------------------------------------------------------
  # CACHE LAYER - Redis Enterprise
  # ---------------------------------------------------------------------------
  redis:
    image: redis:7-alpine
    container_name: redis_cache_layer
    restart: unless-stopped
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
      - ./redis-config/redis.conf:/usr/local/etc/redis/redis.conf
    networks:
      - data_pipeline_network
    command: redis-server /usr/local/etc/redis/redis.conf
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 20s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "3"

# =============================================================================
# DEFINIÇÃO DE VOLUMES PERSISTENTES
# =============================================================================
volumes:
  postgres_data:
    driver: local
    name: pipeline_postgres_data
  minio_data:
    driver: local
    name: pipeline_minio_data
  redis_data:
    driver: local
    name: pipeline_redis_data

# =============================================================================
# DEFINIÇÃO DE REDE ISOLADA
# =============================================================================
networks:
  data_pipeline_network:
    driver: bridge
    name: enterprise_data_network
    ipam:
      config:
        - subnet: 172.20.0.0/16