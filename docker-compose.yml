services:
  
  postgres:
    image: postgres:13-alpine
    container_name: postgres_data_warehouse
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-airflow_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-secure_password_2024}
      POSTGRES_DB: ${POSTGRES_DB:-airflow_warehouse}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - data_pipeline_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-airflow_user} -d ${POSTGRES_DB:-airflow_warehouse}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  minio:
    image: minio/minio:latest
    container_name: minio_object_storage
    restart: unless-stopped
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-admin}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-minio_secure_2024}
    ports:
      - "${MINIO_API_PORT:-9000}:9000"
      - "${MINIO_CONSOLE_PORT:-9001}:9001"
    volumes:
      - minio_data:/data
    networks:
      - data_pipeline_network
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 15s
      timeout: 10s
      retries: 3
      start_period: 40s

  redis:
    image: redis:7-alpine
    container_name: redis_cache_layer
    restart: unless-stopped
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    networks:
      - data_pipeline_network
    command: redis-server
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 20s

  airflow-webserver:
    build: .
    container_name: airflow_webserver
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    env_file:
      - .env.example
    volumes:
      - ./dags:/opt/airflow/dags
      - ./plugins:/opt/airflow/plugins
      - ./logs:/opt/airflow/logs
      - ./scripts:/opt/airflow/scripts
      - ./data:/opt/airflow/data
      - ./init-scripts/entrypoint.sh:/opt/airflow/entrypoint.sh
      - ./airflow.cfg:/opt/airflow/airflow.cfg
    ports:
      - "8080:8080"
    networks:
      - data_pipeline_network
    command: webserver
    entrypoint: /opt/airflow/entrypoint.sh
    healthcheck:
      test: ["CMD-SHELL", "curl --fail http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  airflow-scheduler:
    build: .
    container_name: airflow_scheduler
    restart: unless-stopped
    depends_on:
      airflow-webserver:
        condition: service_healthy
    env_file:
      - .env.example
    volumes:
      - ./dags:/opt/airflow/dags
      - ./plugins:/opt/airflow/plugins
      - ./logs:/opt/airflow/logs
      - ./scripts:/opt/airflow/scripts
      - ./data:/opt/airflow/data
      - ./init-scripts/entrypoint.sh:/opt/airflow/entrypoint.sh
      - ./airflow.cfg:/opt/airflow/airflow.cfg
    networks:
      - data_pipeline_network
    command: scheduler
    entrypoint: /opt/airflow/entrypoint.sh

volumes:
  postgres_data:
    driver: local
    name: pipeline_postgres_data
  minio_data:
    driver: local
    name: pipeline_minio_data
  redis_data:
    driver: local
    name: pipeline_redis_data

networks:
  data_pipeline_network:
    driver: bridge
    name: enterprise_data_network
    ipam:
      config:
        - subnet: 172.20.0.0/16