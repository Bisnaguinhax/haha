#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Simulador de Stream de Vendas - Demonstra√ß√£o T√©cnica
====================================================

Este m√≥dulo simula um stream de dados de vendas em tempo real,
lendo de um arquivo CSV e enviando eventos para uma fila.

Desenvolvido para demonstra√ß√£o de processamento de dados em streaming
com integra√ß√£o ao Apache Airflow.
"""

import csv
import time
import sys
import os
from queue import Queue
from datetime import datetime

# Fila compartilhada para eventos de vendas
fila_eventos = Queue()

# Configura√ß√£o do simulador
CAMINHO_CSV = "C:/Users/Camila Turati/ok/data/olist/dados_consolidados.csv"
LIMITE_EVENTOS = 30
DELAY_STREAMING = 0.5  # segundos entre eventos

def validar_arquivo_csv():
    """Valida se o arquivo CSV existe e √© acess√≠vel."""
    if not os.path.exists(CAMINHO_CSV):
        print(f"‚ùå ERRO: Arquivo n√£o encontrado: {CAMINHO_CSV}")
        print("   -> Verifique se o script configure.py foi executado.")
        return False
    
    if not os.access(CAMINHO_CSV, os.R_OK):
        print(f"‚ùå ERRO: Sem permiss√£o de leitura: {CAMINHO_CSV}")
        return False
    
    return True

def simular_stream_vendas():
    """
    Simula um stream de vendas lendo dados do CSV e enviando para fila.
    
    Returns:
        int: N√∫mero de eventos processados
    """
    print("üöÄ Iniciando simulador de stream de vendas...")
    print(f"üìÇ Arquivo fonte: {CAMINHO_CSV}")
    print(f"üìä Limite de eventos: {LIMITE_EVENTOS}")
    print("-" * 50)
    
    contador = 0
    eventos_processados = 0
    
    try:
        with open(CAMINHO_CSV, newline='', encoding='utf-8') as csvfile:
            reader = csv.DictReader(csvfile)
            
            # Valida se as colunas necess√°rias existem
            required_columns = ['customer_state', 'price']
            if not all(col in reader.fieldnames for col in required_columns):
                print(f"‚ùå ERRO: Colunas obrigat√≥rias n√£o encontradas: {required_columns}")
                print(f"   -> Colunas dispon√≠veis: {reader.fieldnames}")
                return 0
            
            for row in reader:
                if contador >= LIMITE_EVENTOS:
                    break
                
                try:
                    # Valida√ß√£o e convers√£o dos dados
                    price = float(row["price"]) if row["price"] else 0.0
                    state = row["customer_state"].strip() if row["customer_state"] else "UNKNOWN"
                    
                    evento = {
                        "timestamp": datetime.now().isoformat(),
                        "customer_state": state,
                        "price": price,
                        "event_id": contador + 1
                    }
                    
                    fila_eventos.put(evento)
                    print(f"üì§ Evento {contador + 1:02d}: Estado={state:<2} | Valor=R$ {price:>8.2f}")
                    
                    contador += 1
                    eventos_processados += 1
                    
                    # Simula delay de streaming
                    time.sleep(DELAY_STREAMING)
                    
                except (ValueError, KeyError) as e:
                    print(f"‚ö†Ô∏è  Linha {contador + 1} ignorada (dados inv√°lidos): {e}")
                    contador += 1
                    continue
                    
    except FileNotFoundError:
        print(f"‚ùå ERRO: Arquivo n√£o encontrado: {CAMINHO_CSV}")
        return 0
    except Exception as e:
        print(f"‚ùå ERRO INESPERADO: {e}")
        return 0
    
    print("-" * 50)
    print(f"‚úÖ Simula√ß√£o conclu√≠da!")
    print(f"üìä Total de eventos enviados: {eventos_processados}")
    print(f"üì• Eventos na fila: {fila_eventos.qsize()}")
    
    return eventos_processados

if __name__ == "__main__":
    print("=" * 60)
    print("    SIMULADOR DE STREAM DE VENDAS - DEMO T√âCNICA")
    print("=" * 60)
    
    # Valida√ß√£o inicial
    if not validar_arquivo_csv():
        sys.exit(1)
    
    # Executa a simula√ß√£o
    eventos_enviados = simular_stream_vendas()
    
    if eventos_enviados > 0:
        print(f"\nüéâ Simula√ß√£o executada com sucesso!")
        print(f"   -> Use a fila 'fila_eventos' para processar os dados.")
    else:
        print(f"\n‚ùå Falha na simula√ß√£o.")
        sys.exit(1)
