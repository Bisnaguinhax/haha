# =================================================================
#               CASE TÉCNICO - CONFIGURAÇÃO DE AMBIENTE
#               Pipeline de Dados Seguro com Apache Airflow
# =================================================================
#
# INSTRUÇÕES PARA CONFIGURAÇÃO:
# 1. Copie este arquivo: cp .env.example .env
# 2. Preencha as variáveis marcadas com [OBRIGATÓRIO]
# 3. Execute o script de configuração: python configure.py
# =================================================================
# -----------------------------------------------------------------
# SEGURANÇA E CRIPTOGRAFIA
# -----------------------------------------------------------------

# [OBRIGATÓRIO] Chave mestra para o sistema de vault criptografado.
# Utilizada para criptografia AES-256 dos segredos.
# Sugestão para gerar nova chave: openssl rand -base64 32
SECURITY_VAULT_SECRET_KEY="[SUBSTITUA_POR_UMA_CHAVE_FORTE_DE_32_CARACTERES]"

# -----------------------------------------------------------------
# APIS EXTERNAS
# -----------------------------------------------------------------

# [OBRIGATÓRIO] API Key do OpenWeatherMap para coleta de dados climáticos.
# O valor abaixo é uma instrução. É necessário gerar uma chave gratuita no site.
# Obtenha em: https://openweathermap.org/api
OPENWEATHERMAP_API_KEY="[COLE_AQUI_A_CHAVE_GERADA_NO_SITE_OPENWEATHERMAP]"

# -----------------------------------------------------------------
# INFRAESTRUTURA LOCAL (Docker Compose)
# -----------------------------------------------------------------

# MinIO - Object Storage (simulação do S3)
MINIO_ROOT_USER=minioadmin
MINIO_ROOT_PASSWORD=minioadmin123
MINIO_CONSOLE_PORT=9001
MINIO_API_PORT=9000

# PostgreSQL - Data Warehouse
POSTGRES_USER=airflow
POSTGRES_PASSWORD=airflow_secure_2024
POSTGRES_DB=airflow
POSTGRES_PORT=5432

# Apache Airflow
AIRFLOW_ADMIN_USER=admin
AIRFLOW_ADMIN_PASSWORD=admin_secure_2024
AIRFLOW_ADMIN_EMAIL=admin@datacase.local
AIRFLOW_WEBSERVER_PORT=8080

# -----------------------------------------------------------------
# CONFIGURAÇÕES DE AMBIENTE
# -----------------------------------------------------------------

# Ambiente de execução (development, staging, production)
ENVIRONMENT=development

# Nível de log para auditoria e debugging
LOG_LEVEL=INFO

# Timezone para execução das DAGs
TIMEZONE=America/Sao_Paulo

# -----------------------------------------------------------------
# CONFIGURAÇÕES DE PERFORMANCE
# -----------------------------------------------------------------

# Número máximo de workers para processamento paralelo
MAX_WORKERS=4

# Timeout para operações de rede (em segundos)
NETWORK_TIMEOUT=30

# Tamanho máximo do batch para processamento
BATCH_SIZE=1000

# =================================================================
# VERIFICAÇÃO DE CONFIGURAÇÃO:
# =================================================================
# Após configurar o .env, execute para verificar se está válido:
# docker-compose config --quiet && echo "✅ Configuração válida"
# =================================================================

# =================================================================
# EXEMPLO FUNCIONAL PARA DEMONSTRAÇÃO:
# =================================================================
#
# Para facilitar a avaliação, a banca pode usar estes valores de exemplo:
# (Substitua pela sua chave real do OpenWeatherMap)
#
# SECURITY_VAULT_SECRET_KEY="DemonstracaoCase2024!SecureKey#ForEvaluation"
# OPENWEATHERMAP_API_KEY="[SUA_CHAVE_AQUI_DO_OPENWEATHERMAP_ORG]"
#
# Lembre-se: Em produção, sempre use chaves únicas e complexas!
# =================================================================

# =================================================================
# TROUBLESHOOTING COMUM (Linux/Mac/Windows):
# =================================================================
# 
# ERRO DE PERMISSÃO DOCKER:
# - Linux/Mac: sudo chown -R $USER:$USER ./
# - Windows: Execute o Docker Desktop como Administrador
# 
# PORTAS JÁ EM USO:
# - Altere os valores *_PORT acima para portas livres
# - Verifique portas em uso: netstat -tulpn | grep LISTEN (Linux/Mac)
# - Windows: netstat -an | findstr LISTENING
# 
# DOCKER NÃO CONECTA:
# - Linux: sudo systemctl start docker
# - Mac/Windows: Inicie o Docker Desktop
# - Verifique status: docker --version
# 
# PROBLEMAS DE PERFORMANCE:
# - Erro de memória: reduza MAX_WORKERS para 2
# - Lentidão: aumente recursos no Docker Desktop (Mac/Windows)
# - Linux: verifique recursos com: docker system df
# 
# DEBUG E LOGS:
# - Logs detalhados: altere LOG_LEVEL para DEBUG
# - Logs do container: docker-compose logs -f [service_name]
# - Limpar cache: docker system prune -a
# =================================================================
